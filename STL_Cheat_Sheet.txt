#include<bits/stdc++.h>
using namespace std;
int main()
{
	int arr[] = {5, 10, 15, 20, 20, 23, 42, 45}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
	vector<int>vect(arr,arr+n);
	for(int i=0;i<n;i++)cout<<vect[i]<<" ";cout<<endl;
	sort(vect.begin(),vect.end());
	
	reverse(vect.begin(),vect.end());
	reverse(vect.begin(),vect.end());
	
	vector<int>::iterator it;
   	for(it = vect.begin();it!=vect.end();it++)cout<<*it<<" ";cout<<endl;
   	
	cout<<*max_element(vect.begin(),vect.end())<<endl;
	
	cout<<*min_element(vect.begin(),vect.end())<<endl;
	
	//sum
	cout<<accumulate(vect.begin(),vect.end(),0)<<endl;
	
	//count
	cout<<count(vect.begin(),vect.end(),5)<<endl;
	
	//find
	find(vect.begin(),vect.end(),5) != vect.end() ? cout<<"Element Found"<<endl : cout<<"elment not found"<<endl;
	cout<<*find(vect.begin(),vect.end(),5)<<endl;
	
	//>=0
	int p = lower_bound(vect.begin(),vect.end(),20)-vect.begin();
	cout<<p<<endl;
	
	//>
	int q = upper_bound(vect.begin(),vect.end(),20)-vect.begin();
	cout<<q<<endl;
	
	//erasing and resizing
	vect.erase(vect.begin()+1);
	for(it = vect.begin();it!=vect.end();it++)cout<<*it<<" ";cout<<endl;
	
	
	//erasing duplicates in sorted order
	vect.erase(unique(vect.begin(),vect.end()),vect.end());
	for(it = vect.begin();it!=vect.end();it++)cout<<*it<<" ";cout<<endl;
	
	//search is there or not in sorted order
	cout<<binary_search(vect.begin(),vect.end(),15)<<endl;
	
	
	//next_permutation
	next_permutation(vect.begin(), vect.end()); 
    cout << "\nVector after performing next permutation:\n"; 
    for (int i=0; i<n; i++) cout << vect[i] << " "; 
    prev_permutation(vect.begin(), vect.end()); 
    cout << "\nVector after performing prev permutation:\n"; 
    for (int i=0; i<n; i++) cout << vect[i] << " "; 
    cout<<endl;
    
    //distannce between form index and desired index
    cout << "Distance between first to max element: "<<endl;  
    cout << distance(vect.begin(), max_element(vect.begin(), vect.end()))<<endl; 
  

	
	
}